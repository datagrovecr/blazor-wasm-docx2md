@using docx_lib;
@using System.IO;
@inject IJSRuntime JS;

@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<Input type="file" onchange="convertToMd(this)" accept=".docx" id="docxFile" />

@* Method to call C# with an inputfile *@
@* <InputFile OnChange="@convertToMd" accept=".docx" id="docxFile"/> *@

@* <input id="docxFile" type="file" placeholder="Give me a docx file" accept=".docx"><input>
    <input id="mdFile" type="file" placeholder="Give me a md file" accept=".md"><input> *@

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    private IJSObjectReference? module;

    [JSInvokable]
    public static string openDocxFile(byte[] file)
    {
        return docxToMd(file).Result;
    }

    public static async Task<string> docxToMd(byte[] file)
    {
        string md;
        var outStream = new MemoryStream();

        using (MemoryStream data = new MemoryStream(file))
        {
            await DgDocx.docx_to_md(data, outStream);
            StreamReader reader = new StreamReader(outStream);
            outStream.Seek(0, SeekOrigin.Begin);
            md = reader.ReadToEnd();
        }
        return md;
    }


    //A method to convert to Md calling JS
    @* public async Task convertToMd(InputFileChangeEventArgs e)
        {
        var outStream = new MemoryStream();
        String md;

        MemoryStream data = new MemoryStream();

        await e.File.OpenReadStream(maxAllowedSize: long.MaxValue).CopyToAsync(data);
        await DgDocx.docx_to_md(data, outStream);
        outStream.Seek(0, SeekOrigin.Begin);
        StreamReader reader = new StreamReader(outStream);
        md = reader.ReadToEnd();
        //var module = await JS.InvokeAsync<IJSObjectReference>("import", "../main.js");
        await JS.InvokeVoidAsync("downloadBlob", md, "test.md", "application/octet-stream");
        }*@
}
