@using docx_lib;
@using System.IO;
@using System.IO.Compression;
@using System.Text;
@inject IJSRuntime JS;

@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<Input type="file" onchange="convertToMd(this)" accept=".docx" />
<Input type="file" onchange="convertToDocx(this)" accept=".md, .zip" />

@* Method to call C# with an inputfile *@
@* <InputFile OnChange="@convertToMd" accept=".docx" id="docxFile"/> *@

@* <input id="docxFile" type="file" placeholder="Give me a docx file" accept=".docx"><input>
<input id="mdFile" type="file" placeholder="Give me a md file" accept=".md"><input> *@

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    private IJSObjectReference? module;

    [JSInvokable]
    public static string openDocxFile(byte[] file)
    {
        return docxToMd(file).Result;
    }

    public static async Task<string> docxToMd(byte[] file)
    {
        string md;
        var outStream = new MemoryStream();

        using (MemoryStream data = new MemoryStream(file))
        {
            await DgDocx.docx_to_md(data, outStream);
            StreamReader reader = new StreamReader(outStream);
            outStream.Seek(0, SeekOrigin.Begin);
            md = reader.ReadToEnd();
        }
        return md;
    }

    //Works for a normal call

    [JSInvokable]
    public static byte[] openMdFile(byte[] file)
    {
        return convertToDocx(file).Result;//Returns a stream
    }

    public static async Task<byte[]> convertToDocx(byte[] data)
    {
        string stringData = Encoding.UTF8.GetString(data);

        var outStream = new MemoryStream();

        await DgDocx.md_to_docx(stringData, outStream);

        byte[] outData = outStream.ToArray();

        return outData;
    }


    [JSInvokable]
    public static byte[] openMdZipFile(string[] mdFiles, string images)
    {
        var x = convertToZipDocx(mdFiles, images).Result;
        return x;//Returns a stream
    }

    public static async Task<byte[]> convertToZipDocx(string[] mdFiles, string images)
    {
        try
        {
            MemoryStream[] outStreamArray = new MemoryStream[mdFiles.Length];
            MemoryStream zipStream = new MemoryStream();

            await DgDocx.md_to_docx(mdFiles, images, outStreamArray);

            //The .zip file stored in the zipStream
            using (ZipArchive zipArchive = new ZipArchive(zipStream, ZipArchiveMode.Create, true))
            {
                for (int i = 0; i < outStreamArray.Length; i++)
                {
                    //The entry already created in the .zip
                    ZipArchiveEntry entry = zipArchive.CreateEntry($"DGConvertor/Articles/document_{i}.docx");
                    using (Stream entryStream = entry.Open())
                    {
                        try
                        {
                            //byte[] bytes = Encoding.ASCII.GetBytes(mdFiles[i]);
                            await outStreamArray[i].CopyToAsync(entryStream);
                            //entryStream.Write(bytes);
                            //entryStream.Close();
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e);
                        }

                    }
                }
                var y = 3;
            }

            return zipStream.ToArray();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return new byte[] { };
        }

    }
}


@* //A method to convert to Md calling JS
public async Task convertToMd(InputFileChangeEventArgs e){
var outStream = new MemoryStream();
String md;

MemoryStream data = new MemoryStream();

await e.File.OpenReadStream(maxAllowedSize: long.MaxValue).CopyToAsync(data);
await DgDocx.docx_to_md(data, outStream);
outStream.Seek(0, SeekOrigin.Begin);
StreamReader reader = new StreamReader(outStream);
md = reader.ReadToEnd();
//var module = await JS.InvokeAsync<IJSObjectReference>("import", "../main.js");
await JS.InvokeVoidAsync("downloadBlob", md, "test.md", "application/octet-stream");
}

}*@


